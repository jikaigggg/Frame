<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
    spring中的依赖注入
        IOC作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后统一交spring管理
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护就称之为依赖注入：
        能注入的数据有三类：
            基本数据类型和String
            其他bean类型（在配置文件中或者注解中配置过的bean）
            复杂类型/集合类型
        注入的方式有三种：
            第一种：使用构造函数提供
            第二种：使用set方法提供
            第三种：使用注解提供
    -->

    <!--
    构造函数注入
        使用的标签：constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type:用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的数据类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值
            name：用于指定给构造函数中指定名称的参数赋值
            =====以上三个参数都是指定给构造函数中那个参数赋值的=====
            value：用于提供基本类型和String类型的数据
            ref:用于指定其他的bean类型数据；在spring核心容器中出现的bean对象
        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功
        弊端：
            改变了类（bean对象）的实例化方式，使我们在创建对象是如果用不到这些数据也必须提供
    -->
    <bean id="accountService1" class="com.jikaigg.service.impl.AccountServiceImpl1">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>
    <bean name="now" class="java.util.Date"></bean>

    <!--
    set方法注入：更常用的方式
        使用的标签：property
        出现的位置：bean标签的内部
        标签中的属性：
            name：用于指定给构造函数中指定名称的参数赋值
            =====以上三个参数都是指定给构造函数中那个参数赋值的=====
            value：用于提供基本类型和String类型的数据
            ref:用于指定其他的bean类型数据；在spring核心容器中出现的bean对象
        优势：
            创建对象是没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果有某个成员必须有值，则获取对象时set方法无法保证一定注入
    -->
    <bean id="accountService2" class="com.jikaigg.service.impl.AccountServiceImpl2">
        <property name="name" value="yaojikai"></property>
        <property name="age" value="25"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!--
    复杂类型/集合类型的注入:
    用于给List结构集合注入的标签
        list array set
    用于给map集合注入的标签
        map props
    结构相同，标签可以互换
    -->
    <bean id="accountService3" class="com.jikaigg.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>aa</value>
                <value>bb</value>
                <value>cc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>a</value>
                <value>b</value>
                <value>c</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="yao" value="jikai"></entry>
                <entry key="shi" value="mengyu"></entry>
                <entry key="zhang" value="dapao"></entry>
            </map>
        </property>
        <property name="myProps">
            <props>
                <prop key="teatA">a</prop>
                <prop key="teatB">b</prop>
                <prop key="teatC">c</prop>
            </props>
        </property>
    </bean>
</beans>